<?php
/**
 * Group Grade Base
 */

use Illuminate\Database\Capsule\Manager as Capsule,
  Drupal\ClassLearning\Models\User,
  Drupal\ClassLearning\Models\Section,
  Drupal\ClassLearning\Models\SectionUsers,
  Drupal\ClassLearning\Models\Semester,
  Drupal\ClassLearning\Models\Assignment,
  Drupal\ClassLearning\Models\AssignmentSection,

  Drupal\ClassLearning\Workflow\Manager as WorkflowManager;

/**
 * Global date() format for MySQL DATETIME
 *
 * @global string
 */
define('MYSQL_DATETIME', 'Y-m-d H:i:s');

/**
 * Loading of the system
 *
 * @access private
 */
function groupgrade_init() {
  // Composer
  if (! file_exists(__DIR__.'/vendor/autoload.php'))
    die('Composer is not setup for Groupgrade.
      You need to run "drush dl composer && drush composer install"');

  // Load Composer Dependencies
  require_once __DIR__.'/vendor/autoload.php';
  
  Drupal\ClassLearning\Common\Database::setupCapsule();
  
}

function groupgrade_menu() {
  // Parent Level Menu
  
  $frontend = require(__DIR__.'/Menus/Frontend.php');
  $admin = require(__DIR__.'/Menus/Admin.php');

  return array_merge($frontend, $admin);
}


/**
 * Change the administration menu content before it is rendered.
 *
 * @param $content: A structured array suitable for drupal_render(), containing:
 *       menu: The administrative menu of links below the path 'admin/*'.
 *       icon: The icon menu.
 *       user: The user items and links.
 *
 * Passed by reference.
 */
function groupgrade_admin_menu_output_alter(&$content) {
  $content['menu']['pla'] = array(
    '#title' => t('CLASS Learning System'),
    '#href' => 'admin/class',
    '#weight' => 10,
  );
}

function groupgrade_test_form()
{
  var_dump(WorkflowManager::checkAssignments());
  var_dump(WorkflowManager::checkTaskInstances());
  exit;
  //return '';
}

/**
 * Implement hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function groupgrade_assignment_form($node, $form_state) {
  $form = array();
   $type = node_type_get_type($node);

  // We need to define form elements for the node's title and body.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  // We want the body and filter elements to be adjacent. We could try doing
  // this by setting their weights, but another module might add elements to the
  // form with the same weights and end up between ours. By putting them into a
  // sub-array together, we're able force them to be rendered together.
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => 'Assignment Description',
    '#default_value' => '',
    '#required' => FALSE
  );
  //$form['body_filter']['filter'] = filter_form($node->format);

  // NOTE in node_example there is some addition code here not needed for this simple node-type

  return $form;
}

/**
 * Implement hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function groupgrade_problem_form($node, $form_state) {
  $form = array();
   $type = node_type_get_type($node);

  // We want the body and filter elements to be adjacent. We could try doing
  // this by setting their weights, but another module might add elements to the
  // form with the same weights and end up between ours. By putting them into a
  // sub-array together, we're able force them to be rendered together.
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => 'Problem',
    '#default_value' => '',
    '#required' => FALSE
  );
  //$form['body_filter']['filter'] = filter_form($node->format);

  // NOTE in node_example there is some addition code here not needed for this simple node-type

  return $form;
}

/**
 * Impliments hook_mail()
 */
function groupgrade_mail($key, &$message, $params) {
  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  $message['subject'] = t($params['subject']);
  $message['body'] = [];
  $message['body'][] = t(
    'Hello, This is a notification sent to you from @site-name',
    ['@site-name' => variable_get('site_name', 'CLASS Development')],
    $options
  );

  $message['body'][] = t($params['body']);
}

/**
 * Register the Namespaces
 * 
 * @param object
 * @access private
 */
function groupgrade_xautoload($api)
{
  $api->namespaceRoot('Drupal\\ClassLearning');
}

/**
 * Determine whether the current user has the role specified.
 *
 * @param $role_name
 *   The role required for access
 * @return bool
 *   True if the acting user has the role specified.
 */
function groupgrade_custom_access($role_name){
  $access_granted = in_array($role_name, $GLOBALS['user']->roles);
  return $access_granted;
}

/**
 * Determine whether the current user has the role specified.
 *
 * @return bool
 */
function groupgrade_baseaccess() {
  global $user;

  if (! $user->uid) return FALSE;

  return TRUE;
}


/**
 * Handle a user object and retrieve the first/last name or fallback to their username
 * 
 * @param object
 * @return string
 */
function ggPrettyName($user) {
  return $user->name;
  if (count($user->field_first_name) == 0 OR count($user->field_last_name) == 0)
    return $user->name;

  return sprintf('%s %s', $user->field_first_name['und'][0]['value'], $user->field_last_name['und'][0]['value']);
}

function ddebug($var) {
  var_dump($var); exit;
}
function ldebug($exit = false) {
  var_dump(Capsule::connection()->getQueryLog());

  if ($exit) exit;
}

/**
 * Add a User to an ACL by the ACL name and User ID
 * 
 * @param string
 * @param int
 * @return void
 */
function gg_acl_add_user($acl_name, $uid = NULL, $number = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }

  $acl_id = acl_get_id_by_name('pla', $acl_name, $number);
  
  if (! $acl_id)
    $acl_id = acl_create_acl('pla', $acl_name, $number);

  acl_add_user($acl_id, $uid);
}

/**
 * Remove a User from an ACL by the ACL name and User ID
 * 
 * @param string
 * @param int
 * @return void
 */
function gg_acl_remove_user($acl_name, $uid = NULL, $number) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }

  $acl_id = acl_get_id_by_name('pla', $acl_name, $number);
    
  // ACL doesn't exist
  if (! $acl_id)
    return;

  acl_remove_user($acl_id, $uid);
}

/**
 * See if a user has any sort of instructor priviliages
 *
 * @return bool
 */
function gg_has_acl_role($role) {
  global $user;
  
  if (! $user->uid) return FALSE;

  $select = db_query('SELECT COUNT(uid) FROM {acl_user}
  WHERE uid = :uid AND acl_id IN (
    SELECT acl_id FROM {acl} WHERE name = :role
  ) ', array(
    'uid' => $user->uid,
    'role' => $role
  ))->fetchField();

  if ((int) $select > 0)
    return TRUE;
  else
    return FALSE;
}

/**
 * Access permissions callback to see if user has role in section of class
 *
 * @param
 * @return bool
 */
function gg_has_role_in_section($role, $section)
{
  global $user;
  if (! $user->uid) return FALSE;

  $acl_id = acl_get_id_by_name('pla', 'section-'.$role, $section);

  if (! $acl_id) return FALSE;

  return (! acl_has_user($acl_id, $user->uid)) ? FALSE : TRUE;
}

/**
 * Access permissions callback to see if user has role in section of class
 *
 * @param
 * @return bool
 */
function gg_has_role_in_task($task)
{
  global $user;
  if (! $user->uid) return FALSE;

  $task = Drupal\ClassLearning\Models\WorkflowTask::find($task);

  if ($task == NULL OR $task->user_id !== $user->uid)
    return FALSE;
  else
    return TRUE;
}


/**
 * We use carbon to handle a datetime and present it in human time diff
 * From there, we also put it in a span so you can view the actual time as
 * the title of the span.
 *
 * @param string
 */
function gg_time_human($datetime)
{
  $time = Carbon\Carbon::createFromFormat('Y-m-d H:i:s', $datetime);

  return sprintf('<span title="%s">%s</span>',
    $time->toDayDateTimeString(),
    $time->diffForHumans());
}

/**
 * We use a Carbon object and present it in human time diff
 * From there, we also put it in a span so you can view the actual time as
 * the title of the span.
 *
 * @param string
 */
function groupgrade_carbon_span(Carbon\Carbon $time)
{
  return sprintf('<span title="%s">%s</span>',
    $time->toDayDateTimeString(),
    $time->diffForHumans());
}

/**
 * See if a user can access an assignment in a section
 *
 * @param int section id
 * @param int asec_id
 */
function gg_can_access_asec($section_id, $asec_id)
{
  global $user_id;

  $count = AssignmentSection::whereIn('assignment_section.section_id', function($query)
  {
    global $user;

    $query->select('section_id')
      ->from('section_user')
      ->where('user_id', '=', $user->uid);
  });
}

/**
 * Is a user in a section?
 * 
 * @param integer section id
 * @return bool
 */
function gg_in_section($section_id)
{
  global $user;

  return (
    SectionUsers::where('user_id', '=', $user->uid)
    ->where('section_id', '=', $section_id)
    ->count() > 0
  ) ? TRUE : FALSE;
}


/**
 * CodeIgniter Text Helpers
 *
 * @package   CodeIgniter
 * @subpackage  Helpers
 * @category  Helpers
 * @author    EllisLab Dev Team
 * @link    http://codeigniter.com/user_guide/helpers/text_helper.html
 */

// ------------------------------------------------------------------------

if ( ! function_exists('word_limiter'))
{
  /**
   * Word Limiter
   *
   * Limits a string to X number of words.
   *
   * @param string
   * @param int
   * @param string  the end character. Usually an ellipsis
   * @return  string
   */
  function word_limiter($str, $limit = 100, $end_char = '&#8230;')
  {
    if (trim($str) === '')
    {
      return $str;
    }

    preg_match('/^\s*+(?:\S++\s*+){1,'.(int) $limit.'}/', $str, $matches);

    if (strlen($str) === strlen($matches[0]))
    {
      $end_char = '';
    }

    return rtrim($matches[0]).$end_char;
  }
}

/**
 * Impliments hook_cron()
 */
function groupgrade_cron() {
  // Check Assignments
  WorkflowManager::checkAssignments();

  // Check Tasks
  WorkflowManager::checkTaskInstances();
}
